{"ast":null,"code":"var _jsxFileName = \"/Users/tainguyen/Desktop/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport LoginView from './components/LoginView';\nimport Auth from './components/Auth';\nimport axios from 'axios';\nimport constants from './constants.json';\nimport PostInfo from './components/PostInfo';\nimport PostView from './components/PostView';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onLogin = result => {\n      this.setState({\n        isAuthenticated: true\n      });\n      this.setState({\n        userInfo: result.toString()\n      });\n      console.log(typeof this.state.userInfo);\n    };\n\n    this.onLoginFail = () => {\n      this.setState({\n        isAuthenticated: false\n      });\n      console.log(\"Login failed\");\n    };\n\n    this.state = {\n      error: null,\n      isAuthenticated: false,\n      authenticated: false,\n      someData: null,\n      message: \"\",\n      userInfo: null,\n      user: {}\n    };\n  }\n\n  /* This function illustrates how some protected API could be accessed */\n  componentDidMount() {\n    axios.get(constants.baseAddress + \"/post\").then(res => {\n      console.log(res.data);\n      this.setState({\n        post: res.data\n      });\n    }).catch(error => console.log(error)); // Fetch does not send cookies. So you should add credentials: 'include'\n\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(response => {\n      if (response.status === 200) return response.json();\n      throw new Error(\"failed to authenticate user\");\n    }).then(responseJson => {\n      this.setState({\n        authenticated: true,\n        user: responseJson.user\n      });\n      console.log();\n    }).catch(error => {\n      this.setState({\n        authenticated: false,\n        error: \"Failed to authenticate user\"\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.user);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/login\",\n      exact: true,\n      render: routeProps => React.createElement(LoginView, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        loginSuccess: this.onLogin,\n        loginFail: this.onLoginFail,\n        redirectPathOnSuccess: \"/\"\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      render: routeProps => React.createElement(PostInfo, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        authenticated: this.state.authenticated,\n        user: this.state.user\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/postview\",\n      exact: true,\n      render: routeProps => React.createElement(PostView, Object.assign({\n        user: this.state.user,\n        userInfo: this.state.userInfo\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","LoginView","Auth","axios","constants","PostInfo","PostView","App","constructor","props","onLogin","result","setState","isAuthenticated","userInfo","toString","console","log","state","onLoginFail","error","authenticated","someData","message","user","componentDidMount","get","baseAddress","then","res","data","post","catch","fetch","method","credentials","headers","Accept","response","status","json","Error","responseJson","render","routeProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport LoginView from './components/LoginView';\nimport Auth from './components/Auth';\nimport axios from 'axios';\nimport constants from './constants.json';\nimport PostInfo from './components/PostInfo';\nimport PostView from './components/PostView';\n\n\nexport default class App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      error: null,\n      isAuthenticated: false,\n      authenticated: false,\n      someData: null,\n      message: \"\",\n      userInfo: null,\n      user: {},\n    };\n  } \n\n  onLogin = (result) => {\n    this.setState({ isAuthenticated: true })\n    this.setState({userInfo: result.toString()})\n    console.log(typeof(this.state.userInfo));\n  }\n\n  onLoginFail = () => {\n    this.setState({ isAuthenticated: false });\n    console.log(\"Login failed\");\n  }\n\n  /* This function illustrates how some protected API could be accessed */\n\n  componentDidMount() {\n    axios.get(constants.baseAddress + \"/post\")\n    .then(res => {\n      console.log(res.data);\n      this.setState({ post: res.data });\n    })\n    .catch(error => console.log(error));\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user,\n        });\n        console.log()\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n  render() {\n    console.log(this.state.user);\n    return (\n      <div>\n      <Router>\n        \n        <Route path=\"/login\" exact render={\n          (routeProps) =>\n            <LoginView\n              isAuthenticated={this.state.isAuthenticated}\n              loginSuccess = { this.onLogin }\n              loginFail = { this.onLoginFail }\n              redirectPathOnSuccess=\"/\"\n              {...routeProps}\n            />\n        } />\n        <Route path=\"/\" exact render={\n          (routeProps) => <PostInfo isAuthenticated={this.state.isAuthenticated} authenticated={this.state.authenticated} user={this.state.user} {...routeProps} />\n        }/>\n        <Route path=\"/postview\" exact render={\n          (routeProps) => <PostView user={this.state.user} userInfo={this.state.userInfo} {...routeProps} />\n        }/>\n      </Router>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}