{"ast":null,"code":"var _jsxFileName = \"/Users/tainguyen/Desktop/my-app/src/components/Homepage.js\";\nimport Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport PostInfo from \"./PostInfo\";\nimport { Link } from \"react-router-dom\";\nexport default class HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {},\n      error: null,\n      authenticated: false\n    };\n\n    this._handleNotAuthenticated = () => {};\n\n    this._handleSignInClick = () => {\n      // Authenticate using via passport api in the backend\n      // Open Twitter login page\n      // Upon successful login, a cookie session will be stored in the client\n      window.open(\"http://localhost:4000/auth/google\", \"_self\");\n    };\n\n    this._handleLogoutClick = () => {\n      // Logout using Twitter passport api\n      // Set authenticated state to false in the HomePage\n      window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n      this.setState({\n        authenticated: false\n      });\n    };\n  }\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(response => {\n      if (response.status === 200) return response.json();\n      throw new Error(\"failed to authenticate user\");\n    }).then(responseJson => {\n      this.setState({\n        authenticated: true,\n        user: responseJson.user\n      });\n    }).catch(error => {\n      this.setState({\n        authenticated: false,\n        error: \"Failed to authenticate user\"\n      });\n    });\n  }\n\n  render() {\n    const {\n      authenticated\n    } = this.state;\n    console.log(this.state.authenticated);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(PostInfo, {\n      authenticated: authenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      className: \"menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, React.createElement(Link, {\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Home\")), authenticated ? React.createElement(\"li\", {\n      onClick: this._handleLogoutClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Logout\") : React.createElement(\"li\", {\n      onClick: this._handleSignInClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, \"Login\")), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, !authenticated ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, \"Welcome!\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"You have login succcessfully!\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/components/Homepage.js"],"names":["Header","PropTypes","React","Component","PostInfo","Link","HomePage","state","user","error","authenticated","_handleNotAuthenticated","_handleSignInClick","window","open","_handleLogoutClick","setState","componentDidMount","fetch","method","credentials","headers","Accept","then","response","status","json","Error","responseJson","catch","render","console","log"],"mappings":"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","sourcesContent":["import Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport PostInfo from \"./PostInfo\"\nimport { Link } from \"react-router-dom\";\nexport default class HomePage extends Component {\n\n\n  state = {\n    user: {},\n    error: null,\n    authenticated: false\n  };\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user\n        });\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n  render() {\n    const { authenticated } = this.state;\n    console.log(this.state.authenticated);\n    return (\n      <div>\n        <PostInfo \n          authenticated={authenticated}  \n        />\n        <ul className=\"menu\">\n        <li>\n          <Link to=\"/\">Home</Link>\n        </li>\n        {authenticated ? (\n          <li onClick={this._handleLogoutClick}>Logout</li>\n        ) : (\n          <li onClick={this._handleSignInClick}>Login</li>\n        )}\n        </ul>\n        <div>\n          {!authenticated ? (\n            <h1>Welcome!</h1>\n          ) : (\n            <div>\n              <h1>You have login succcessfully!</h1>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  _handleNotAuthenticated = () => {\n    \n  };\n  _handleSignInClick = () => {\n    // Authenticate using via passport api in the backend\n    // Open Twitter login page\n    // Upon successful login, a cookie session will be stored in the client\n    window.open(\"http://localhost:4000/auth/google\", \"_self\");\n  };\n\n  _handleLogoutClick = () => {\n    // Logout using Twitter passport api\n    // Set authenticated state to false in the HomePage\n    window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n    this.setState({ authenticated: false });\n  };\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}