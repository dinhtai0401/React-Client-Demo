{"ast":null,"code":"var _jsxFileName = \"/Users/tainguyen/Desktop/my-app/src/App.js\";\nimport React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport LoginView from './components/LoginView';\nimport Auth from './components/Auth';\nimport axios from 'axios';\nimport constants from './constants.json';\nimport PostInfo from './components/PostInfo';\nimport PostView from './components/PostView';\nimport PostChange from './components/PostChange';\nimport PostUser from './components/PostUser';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onLogin = result => {\n      this.setState({\n        isAuthenticated: true\n      });\n      this.setState({\n        userInfo: result.toString()\n      });\n      console.log(this.state.userInfo);\n    };\n\n    this.onLoginFail = () => {\n      this.setState({\n        isAuthenticated: false\n      });\n      console.log(\"Login failed\");\n    };\n\n    this.onLogOut = event => {\n      this.setState({\n        isAuthenticated: false\n      });\n      this.setState({\n        userInfo: ''\n      });\n      console.log(\"logout\");\n    };\n\n    this.getProductInfo = id => {\n      console.log(id);\n      return this.state.post.find(i => i.id === id);\n    };\n\n    this.state = {\n      error: null,\n      isAuthenticated: false,\n      authenticated: false,\n      someData: null,\n      message: \"\",\n      userInfo: '',\n      user: '',\n      post: []\n    };\n  }\n\n  /* This function illustrates how some protected API could be accessed */\n  componentDidMount() {\n    axios.get(constants.baseAddress + \"/post\").then(res => {\n      console.log(res.data);\n      this.setState({\n        post: res.data\n      });\n    }).catch(error => console.log(error)); // Fetch does not send cookies. So you should add credentials: 'include'\n\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(response => {\n      if (response.status === 200) return response.json();\n      throw new Error(\"failed to authenticate user\");\n    }).then(responseJson => {\n      this.setState({\n        authenticated: true,\n        user: responseJson.user\n      });\n      console.log();\n    }).catch(error => {\n      this.setState({\n        authenticated: false,\n        error: \"Failed to authenticate user\"\n      });\n    });\n  }\n\n  render() {\n    console.log(this.state.post);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Router, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Route, {\n      path: \"/login\",\n      exact: true,\n      render: routeProps => React.createElement(LoginView, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        loginSuccess: this.onLogin,\n        loginFail: this.onLoginFail,\n        redirectPathOnSuccess: \"/\"\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/\",\n      exact: true,\n      render: routeProps => React.createElement(PostInfo, Object.assign({\n        isAuthenticated: this.state.isAuthenticated,\n        authenticated: this.state.authenticated,\n        onLogOut: this.onLogOut,\n        userInfo: this.state.userInfo,\n        user: this.state.user,\n        post: this.state.post\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/postview\",\n      exact: true,\n      render: routeProps => React.createElement(PostView, Object.assign({\n        user: this.state.user,\n        userInfo: this.state.userInfo\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/product/:id\",\n      exact: true,\n      render: routeProps => React.createElement(PostChange, Object.assign({\n        user: this.state.user,\n        userInfo: this.state.userInfo,\n        getProductInfo: this.getProductInfo\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }), React.createElement(Route, {\n      path: \"/postuser\",\n      exact: true,\n      render: routeProps => React.createElement(PostUser, Object.assign({\n        user: this.state.user,\n        userInfo: this.state.userInfo\n      }, routeProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      })),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    })));\n  }\n\n}","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","LoginView","Auth","axios","constants","PostInfo","PostView","PostChange","PostUser","App","constructor","props","onLogin","result","setState","isAuthenticated","userInfo","toString","console","log","state","onLoginFail","onLogOut","event","getProductInfo","id","post","find","i","error","authenticated","someData","message","user","componentDidMount","get","baseAddress","then","res","data","catch","fetch","method","credentials","headers","Accept","response","status","json","Error","responseJson","render","routeProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport LoginView from './components/LoginView';\nimport Auth from './components/Auth';\nimport axios from 'axios';\nimport constants from './constants.json';\nimport PostInfo from './components/PostInfo';\nimport PostView from './components/PostView';\nimport PostChange from './components/PostChange';\nimport PostUser from './components/PostUser';\n\nexport default class App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      error: null,\n      isAuthenticated: false,\n      authenticated: false,\n      someData: null,\n      message: \"\",\n      userInfo: '',\n      user: '',\n      post: [],\n    };\n  } \n\n  onLogin = (result) => {\n    this.setState({ isAuthenticated: true })\n    this.setState({userInfo: result.toString()})\n    console.log(this.state.userInfo);\n  }\n\n  onLoginFail = () => {\n    this.setState({ isAuthenticated: false });\n    console.log(\"Login failed\");\n  }\n\n  onLogOut= (event) => {\n    this.setState({isAuthenticated: false})\n    this.setState({ userInfo: ''});\n    console.log(\"logout\")\n  }\n\n  /* This function illustrates how some protected API could be accessed */\n\n  componentDidMount() {\n    axios.get(constants.baseAddress + \"/post\")\n    .then(res => {\n      console.log(res.data);\n      this.setState({ post: res.data });\n    })\n    .catch(error => console.log(error));\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user,\n        });\n        console.log()\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n    getProductInfo = (id) => {\n      console.log(id)\n      return this.state.post.find(i => i.id === id);\n    }\n\n  render() {\n    console.log(this.state.post);\n    return (\n      <div>\n      <Router>\n        \n        <Route path=\"/login\" exact render={\n          (routeProps) =>\n            <LoginView\n              isAuthenticated={this.state.isAuthenticated}\n              loginSuccess = { this.onLogin }\n              loginFail = { this.onLoginFail }\n              redirectPathOnSuccess=\"/\"\n              {...routeProps}\n            />\n        } />\n        <Route path=\"/\" exact render={\n          (routeProps) => <PostInfo isAuthenticated={this.state.isAuthenticated} authenticated={this.state.authenticated} onLogOut={this.onLogOut} userInfo={this.state.userInfo} user={this.state.user} post={this.state.post} {...routeProps} />\n        }/>\n        <Route path=\"/postview\" exact render={\n          (routeProps) => <PostView user={this.state.user} userInfo={this.state.userInfo}  {...routeProps} />\n        }/>\n        <Route path=\"/product/:id\" exact render={\n          (routeProps) => <PostChange user={this.state.user} userInfo={this.state.userInfo} getProductInfo={ this.getProductInfo } {...routeProps} />\n        }/>\n        <Route path=\"/postuser\" exact render={\n          (routeProps) => <PostUser user={this.state.user} userInfo={this.state.userInfo} {...routeProps} />\n        }/>\n      </Router>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}