{"ast":null,"code":"var _jsxFileName = \"/Users/tainguyen/Desktop/my-app/src/components/Homepage.js\";\nimport Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport PostInfo from \"./PostInfo\";\nexport default class HomePage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {},\n      error: null,\n      authenticated: false\n    };\n\n    this._handleNotAuthenticated = () => {\n      this.setState({\n        authenticated: false\n      });\n    };\n\n    this._handleSignInClick = () => {\n      // Authenticate using via passport api in the backend\n      // Open Twitter login page\n      // Upon successful login, a cookie session will be stored in the client\n      window.open(\"http://localhost:4000/auth/google\", \"_self\");\n    };\n\n    this._handleLogoutClick = () => {\n      // Logout using Twitter passport api\n      // Set authenticated state to false in the HomePage\n      window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n      this.props.handleNotAuthenticated();\n    };\n  }\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    }).then(response => {\n      if (response.status === 200) return response.json();\n      throw new Error(\"failed to authenticate user\");\n    }).then(responseJson => {\n      this.setState({\n        authenticated: true,\n        user: responseJson.user\n      });\n    }).catch(error => {\n      this.setState({\n        authenticated: false,\n        error: \"Failed to authenticate user\"\n      });\n    });\n  }\n\n  render() {\n    const {\n      authenticated\n    } = this.state;\n    console.log(this.state.authenticated);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(PostInfo, {\n      authenticated: authenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Header, {\n      authenticated: authenticated,\n      handleNotAuthenticated: this._handleNotAuthenticated,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, !authenticated ? React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, \"Welcome!\") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"You have login succcessfully!\"))));\n  }\n\n}","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/components/Homepage.js"],"names":["Header","PropTypes","React","Component","PostInfo","HomePage","state","user","error","authenticated","_handleNotAuthenticated","setState","_handleSignInClick","window","open","_handleLogoutClick","props","handleNotAuthenticated","componentDidMount","fetch","method","credentials","headers","Accept","then","response","status","json","Error","responseJson","catch","render","console","log"],"mappings":";AAAA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,eAAe,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAAA;AAAA;AAAA,SAG9CG,KAH8C,GAGtC;AACNC,MAAAA,IAAI,EAAE,EADA;AAENC,MAAAA,KAAK,EAAE,IAFD;AAGNC,MAAAA,aAAa,EAAE;AAHT,KAHsC;;AAAA,SA+D9CC,uBA/D8C,GA+DpB,MAAM;AAC9B,WAAKC,QAAL,CAAc;AAAEF,QAAAA,aAAa,EAAE;AAAjB,OAAd;AACD,KAjE6C;;AAAA,SAkE9CG,kBAlE8C,GAkEzB,MAAM;AACzB;AACA;AACA;AACAC,MAAAA,MAAM,CAACC,IAAP,CAAY,mCAAZ,EAAiD,OAAjD;AACD,KAvE6C;;AAAA,SAyE9CC,kBAzE8C,GAyEzB,MAAM;AACzB;AACA;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAY,mCAAZ,EAAiD,OAAjD;AACA,WAAKE,KAAL,CAAWC,sBAAX;AACD,KA9E6C;AAAA;;AAS9CC,EAAAA,iBAAiB,GAAG;AAClB;AACAC,IAAAA,KAAK,CAAC,0CAAD,EAA6C;AAChDC,MAAAA,MAAM,EAAE,KADwC;AAEhDC,MAAAA,WAAW,EAAE,SAFmC;AAGhDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB,kBAFT;AAGP,4CAAoC;AAH7B;AAHuC,KAA7C,CAAL,CASGC,IATH,CASQC,QAAQ,IAAI;AAChB,UAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B,OAAOD,QAAQ,CAACE,IAAT,EAAP;AAC7B,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD,KAZH,EAaGJ,IAbH,CAaQK,YAAY,IAAI;AACpB,WAAKlB,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAE,IADH;AAEZF,QAAAA,IAAI,EAAEsB,YAAY,CAACtB;AAFP,OAAd;AAID,KAlBH,EAmBGuB,KAnBH,CAmBStB,KAAK,IAAI;AACd,WAAKG,QAAL,CAAc;AACZF,QAAAA,aAAa,EAAE,KADH;AAEZD,QAAAA,KAAK,EAAE;AAFK,OAAd;AAID,KAxBH;AAyBD;;AAEDuB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEtB,MAAAA;AAAF,QAAoB,KAAKH,KAA/B;AACA0B,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAK3B,KAAL,CAAWG,aAAvB;AACA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AACE,MAAA,aAAa,EAAEA,aADjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAIE,oBAAC,MAAD;AACE,MAAA,aAAa,EAAEA,aADjB;AAEE,MAAA,sBAAsB,EAAE,KAAKC,uBAF/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,EAQE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACD,aAAD,GACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADD,GAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCADF,CAJJ,CARF,CADF;AAoBD;;AA7D6C","sourcesContent":["import Header from \"./Header\";\nimport PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport PostInfo from \"./PostInfo\"\n\nexport default class HomePage extends Component {\n\n\n  state = {\n    user: {},\n    error: null,\n    authenticated: false\n  };\n\n  componentDidMount() {\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user\n        });\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n  render() {\n    const { authenticated } = this.state;\n    console.log(this.state.authenticated);\n    return (\n      <div>\n        <PostInfo \n          authenticated={authenticated}  \n        />\n        <Header\n          authenticated={authenticated}\n          handleNotAuthenticated={this._handleNotAuthenticated}\n        />\n        <div>\n          {!authenticated ? (\n            <h1>Welcome!</h1>\n          ) : (\n            <div>\n              <h1>You have login succcessfully!</h1>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  _handleNotAuthenticated = () => {\n    this.setState({ authenticated: false });\n  };\n  _handleSignInClick = () => {\n    // Authenticate using via passport api in the backend\n    // Open Twitter login page\n    // Upon successful login, a cookie session will be stored in the client\n    window.open(\"http://localhost:4000/auth/google\", \"_self\");\n  };\n\n  _handleLogoutClick = () => {\n    // Logout using Twitter passport api\n    // Set authenticated state to false in the HomePage\n    window.open(\"http://localhost:4000/auth/logout\", \"_self\");\n    this.props.handleNotAuthenticated();\n  };\n\n}\n\n\n"]},"metadata":{},"sourceType":"module"}