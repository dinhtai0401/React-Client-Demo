{"ast":null,"code":"import axios from 'axios';\nimport constants from '../constants.json';\n/*let userInfo = {\n  username: null,\n  password: null,\n}\n\n\nlet myAuth = {\n    authenticate: (username, password, token) => {      \n      return new Promise((resolve, reject) => {\n        axios.get(constants.baseAddress + '/users/:id', \n            {\n              auth: {\n              username: username,\n              password: password,\n            }\n            }).then((e)=>{\n            const token = e.data.token;\n            const config = {\n                headers: { Authorization: `Bearer ${token}` }\n            };\n            axios.get(constants.baseAddress + '/users/signin',\n                config\n            ).then(result => {\n                userInfo = {\n                  username : username,\n                  password: password,\n                }\n                console.log(userInfo);\n                resolve();\n            }).catch(error => \n                {\n                  console.log(error);\n                  reject();\n                });\n            })\n    })\n    },\n    getAxiosAuth: () => {\n      return {\n        auth: userInfo\n      }\n    }\n}\n\n\nexport default myAuth;*/\n\nlet userInfo = {\n  username: null,\n  password: null\n};\nlet myAuth = {\n  authenticate: (username, password) => {\n    return new Promise((resolve, reject) => {\n      axios.get('http://localhost:4000' + '/users/:id' + username, {\n        auth: {\n          username: username,\n          password: password\n        }\n      }).then(result => {\n        userInfo = {\n          username: username,\n          password: password\n        };\n        resolve(result.data[0]);\n      }).catch(error => {\n        console.log(error);\n        reject();\n      });\n    });\n  },\n  getAxiosAuth: () => {\n    return {\n      auth: userInfo\n    };\n  }\n};\nexport default myAuth;","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/components/Auth.js"],"names":["axios","constants","userInfo","username","password","myAuth","authenticate","Promise","resolve","reject","get","auth","then","result","data","catch","error","console","log","getAxiosAuth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,mBAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA,IAAIC,QAAQ,GAAG;AACbC,EAAAA,QAAQ,EAAE,IADG;AAEbC,EAAAA,QAAQ,EAAE;AAFG,CAAf;AAKA,IAAIC,MAAM,GAAG;AACTC,EAAAA,YAAY,EAAE,CAACH,QAAD,EAAWC,QAAX,KAAwB;AACpC,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCT,MAAAA,KAAK,CAACU,GAAN,CAAU,0BAA0B,YAA1B,GAAwCP,QAAlD,EACE;AACIQ,QAAAA,IAAI,EAAE;AACNR,UAAAA,QAAQ,EAAEA,QADJ;AAENC,UAAAA,QAAQ,EAAEA;AAFJ;AADV,OADF,EAOGQ,IAPH,CAOQC,MAAM,IAAI;AACdX,QAAAA,QAAQ,GAAG;AACTC,UAAAA,QAAQ,EAAEA,QADD;AAETC,UAAAA,QAAQ,EAAEA;AAFD,SAAX;AAIAI,QAAAA,OAAO,CAACK,MAAM,CAACC,IAAP,CAAY,CAAZ,CAAD,CAAP;AACD,OAbH,EAcGC,KAdH,CAcSC,KAAK,IACV;AACEC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAP,QAAAA,MAAM;AACP,OAlBL;AAoBD,KArBM,CAAP;AAsBD,GAxBQ;AAyBTU,EAAAA,YAAY,EAAE,MAAM;AAClB,WAAO;AACLR,MAAAA,IAAI,EAAET;AADD,KAAP;AAGD;AA7BQ,CAAb;AAgCA,eAAeG,MAAf","sourcesContent":["import axios from 'axios';\nimport constants from '../constants.json';\n\n/*let userInfo = {\n  username: null,\n  password: null,\n}\n\n\nlet myAuth = {\n    authenticate: (username, password, token) => {      \n      return new Promise((resolve, reject) => {\n        axios.get(constants.baseAddress + '/users/:id', \n            {\n              auth: {\n              username: username,\n              password: password,\n            }\n            }).then((e)=>{\n            const token = e.data.token;\n            const config = {\n                headers: { Authorization: `Bearer ${token}` }\n            };\n            axios.get(constants.baseAddress + '/users/signin',\n                config\n            ).then(result => {\n                userInfo = {\n                  username : username,\n                  password: password,\n                }\n                console.log(userInfo);\n                resolve();\n            }).catch(error => \n                {\n                  console.log(error);\n                  reject();\n                });\n            })\n    })\n    },\n    getAxiosAuth: () => {\n      return {\n        auth: userInfo\n      }\n    }\n}\n\n\nexport default myAuth;*/\n\nlet userInfo = {\n  username: null,\n  password: null\n}\n\nlet myAuth = {\n    authenticate: (username, password) => {\n      return new Promise((resolve, reject) => {\n        axios.get('http://localhost:4000' + '/users/:id'+ username,\n          {\n              auth: {\n              username: username,\n              password: password\n            }\n          })\n          .then(result => {\n            userInfo = {\n              username: username,\n              password: password,\n            }\n            resolve(result.data[0]);\n          })\n          .catch(error =>\n            {\n              console.log(error);\n              reject();\n            }\n          )\n      });\n    },\n    getAxiosAuth: () => {\n      return {\n        auth: userInfo\n      }\n    }\n}\n\nexport default myAuth;"]},"metadata":{},"sourceType":"module"}