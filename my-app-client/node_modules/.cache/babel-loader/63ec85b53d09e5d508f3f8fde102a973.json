{"ast":null,"code":"import _classCallCheck from\"/Users/tainguyen/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/tainguyen/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/tainguyen/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/tainguyen/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _inherits from\"/Users/tainguyen/Desktop/my-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from'react';import{BrowserRouter as Router,Route,Link}from\"react-router-dom\";import LoginView from'./components/LoginView';import Auth from'./components/Auth';import axios from'axios';import constants from'./constants.json';import PostInfo from'./components/PostInfo';import PostView from'./components/PostView';var App=/*#__PURE__*/function(_Component){_inherits(App,_Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));_this.onLogin=function(result){_this.setState({isAuthenticated:true});_this.setState({userInfo:result.toString()});console.log(_this.state.userInfo);};_this.onLoginFail=function(){_this.setState({isAuthenticated:false});console.log(\"Login failed\");};_this.onLogOut=function(event){_this.setState({isAuthenticated:false});_this.setState({userInfo:''});console.log(\"logout\");};_this.state={error:null,isAuthenticated:false,authenticated:false,someData:null,message:\"\",userInfo:'',user:''};return _this;}_createClass(App,[{key:\"componentDidMount\",/* This function illustrates how some protected API could be accessed */value:function componentDidMount(){var _this2=this;axios.get(constants.baseAddress+\"/post\").then(function(res){console.log(res.data);_this2.setState({post:res.data});}).catch(function(error){return console.log(error);});// Fetch does not send cookies. So you should add credentials: 'include'\nfetch(\"http://localhost:4000/auth/login/success\",{method:\"GET\",credentials:\"include\",headers:{Accept:\"application/json\",\"Content-Type\":\"application/json\",\"Access-Control-Allow-Credentials\":true}}).then(function(response){if(response.status===200)return response.json();throw new Error(\"failed to authenticate user\");}).then(function(responseJson){_this2.setState({authenticated:true,user:responseJson.user});console.log();}).catch(function(error){_this2.setState({authenticated:false,error:\"Failed to authenticate user\"});});}},{key:\"render\",value:function render(){var _this3=this;console.log(typeof this.state.user);return React.createElement(\"div\",null,React.createElement(Router,null,React.createElement(Route,{path:\"/login\",exact:true,render:function render(routeProps){return React.createElement(LoginView,Object.assign({isAuthenticated:_this3.state.isAuthenticated,loginSuccess:_this3.onLogin,loginFail:_this3.onLoginFail,redirectPathOnSuccess:\"/\"},routeProps));}}),React.createElement(Route,{path:\"/\",exact:true,render:function render(routeProps){return React.createElement(PostInfo,Object.assign({isAuthenticated:_this3.state.isAuthenticated,authenticated:_this3.state.authenticated,onLogOut:_this3.onLogOut,userInfo:_this3.state.userInfo,user:_this3.state.user},routeProps));}}),React.createElement(Route,{path:\"/postview\",exact:true,render:function render(routeProps){return React.createElement(PostView,Object.assign({user:_this3.state.user,userInfo:_this3.state.userInfo},routeProps));}})));}}]);return App;}(Component);export{App as default};","map":{"version":3,"sources":["/Users/tainguyen/Desktop/my-app/src/App.js"],"names":["React","Component","BrowserRouter","Router","Route","Link","LoginView","Auth","axios","constants","PostInfo","PostView","App","props","onLogin","result","setState","isAuthenticated","userInfo","toString","console","log","state","onLoginFail","onLogOut","event","error","authenticated","someData","message","user","get","baseAddress","then","res","data","post","catch","fetch","method","credentials","headers","Accept","response","status","json","Error","responseJson","routeProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport LoginView from './components/LoginView';\nimport Auth from './components/Auth';\nimport axios from 'axios';\nimport constants from './constants.json';\nimport PostInfo from './components/PostInfo';\nimport PostView from './components/PostView';\n\n\nexport default class App extends Component {\n  constructor(props)\n  {\n    super(props);\n    this.state = {\n      error: null,\n      isAuthenticated: false,\n      authenticated: false,\n      someData: null,\n      message: \"\",\n      userInfo: '',\n      user: '',\n    };\n  } \n\n  onLogin = (result) => {\n    this.setState({ isAuthenticated: true })\n    this.setState({userInfo: result.toString()})\n    console.log(this.state.userInfo);\n  }\n\n  onLoginFail = () => {\n    this.setState({ isAuthenticated: false });\n    console.log(\"Login failed\");\n  }\n\n  onLogOut= (event) => {\n    this.setState({isAuthenticated: false})\n    this.setState({ userInfo: ''});\n    console.log(\"logout\")\n  }\n\n  /* This function illustrates how some protected API could be accessed */\n\n  componentDidMount() {\n    axios.get(constants.baseAddress + \"/post\")\n    .then(res => {\n      console.log(res.data);\n      this.setState({ post: res.data });\n    })\n    .catch(error => console.log(error));\n    // Fetch does not send cookies. So you should add credentials: 'include'\n    fetch(\"http://localhost:4000/auth/login/success\", {\n      method: \"GET\",\n      credentials: \"include\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Access-Control-Allow-Credentials\": true\n      }\n    })\n      .then(response => {\n        if (response.status === 200) return response.json();\n        throw new Error(\"failed to authenticate user\");\n      })\n      .then(responseJson => {\n        this.setState({\n          authenticated: true,\n          user: responseJson.user,\n        });\n        console.log()\n      })\n      .catch(error => {\n        this.setState({\n          authenticated: false,\n          error: \"Failed to authenticate user\"\n        });\n      });\n  }\n\n  render() {\n    console.log(typeof(this.state.user));\n    return (\n      <div>\n      <Router>\n        \n        <Route path=\"/login\" exact render={\n          (routeProps) =>\n            <LoginView\n              isAuthenticated={this.state.isAuthenticated}\n              loginSuccess = { this.onLogin }\n              loginFail = { this.onLoginFail }\n              redirectPathOnSuccess=\"/\"\n              {...routeProps}\n            />\n        } />\n        <Route path=\"/\" exact render={\n          (routeProps) => <PostInfo isAuthenticated={this.state.isAuthenticated} authenticated={this.state.authenticated} onLogOut={this.onLogOut} userInfo={this.state.userInfo} user={this.state.user} {...routeProps} />\n        }/>\n        <Route path=\"/postview\" exact render={\n          (routeProps) => <PostView user={this.state.user} userInfo={this.state.userInfo}  {...routeProps} />\n        }/>\n      </Router>\n      </div>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}